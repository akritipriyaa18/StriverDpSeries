Problem Link ---> https://www.codingninjas.com/codestudio/problems/frog-jump_3621012?source=youtube&campaign=striver_dp_videos&utm_source=youtube&utm_medium=affiliate&utm_campaign=striver_dp_videos

--> It's a find min / max problem

Understanding Problem :
If n = 3 , frog can jump 1 or 2 steps and energy lost in jumping is height[j] - height[i]
It will look like this :
steps ------> 10 -> 20 -> 30 -> 10
Energy lost->    10     10    20

steps ------> 10 -> 20 --> 10     
Energy lost->    10     10       ----> minimum energy lost

steps ------> 10 --> 30 -> 10
Energy lost->    20     20

This is TRYING ALL POSSIBLE WAYS which means RECURSION.

According to rules
ACC TO RULES OF RECURRENCE:-
1. Express in terms of indexs. ---> f(n)
2. Do all possible stufs acc to problem statement.
3. Sum of all stuffs ---> Count all ways //////  Max / Min of all stuffs ----> Find min/ max
4. Base case


f(n) ---> minmimum energy req. to reach n from 0 index.

CODE:

   f(ind)
   {
     if(ind == 0)
     return 0;
     
     oneStep = f(ind - 1) + abs(a[ind] + a[ind - 1]);
     twoStep = f(ind - 2) + abs(a[ind] + a[ind - 2]);
     
     return min(oneStep , twoStep);
     
    }
    TC -> 
    SC ->

    Recursive Tree:

                                f(3)
                               /    \
                           f(2)      f(1)
                          /    \     /   \
                         f(1)  f(0) f(0)  f(-1)


   -----> We can clearly see overlapping subproblems. So memoization comes in action.

   CODE:
   int f(int n , vector<int>&heights , int dp[])
   {
       if(n == 0)
        return 0;
        
      if(dp[n] != -1)
        return dp[n];
     int left = f(n - 1 , heights , dp) + abs(heights[n] - heights[n - 1]);
     int right = INT_MAX;
     if(n > 1)
        right = f(n - 2 , heights , dp) + abs(heights[n] - heights[n - 2]);
     return dp[n] = min(left , right);
   }
   int frogJump(int n, vector<int> &heights)
   {
    int dp[n + 1];
    memset(dp , -1 , sizeof(dp));
    return f(n - 1 , heights , dp);
  }

    TC --> O(N)
    SC --> O(N) ---> Recursive stack space + O(N) ---> Dp array


    To decrease space complexity , Tabulation(Bottom - up Approach):

    int frogJump(int n, vector<int> &heights)
{
    vector<int>dp(n , 0);
    dp[0] = 0;
    
    for(int i = 1; i < n; i++)
    {
        int left = dp[i - 1] + abs(heights[i] - heights[i - 1]);
        int right = INT_MAX;
        if(i > 1)
          right = dp[i - 2] + abs(heights[i] - heights[i - 2]);
        dp[i] = min(left , right);
    }
    
    return dp[n - 1];
}

    TC --> O(N)
    SC --> O(N) -->Dp array
