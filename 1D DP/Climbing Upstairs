Problem Link ---> https://leetcode.com/problems/climbing-stairs/

--> It's a count ways problem

Understanding Problem :
If n = 3 , count the ways to reach the top taking 1 or 2 steps.

It will look like this :
0 -> 1 -> 2-> 3
0 --> 2 -> 3
0 -> 1 --> 3

This is TRYING ALL POSSIBLE WAYS which means RECURSION.

ACC TO RULES OF RECURRENCE:-
1. Express in terms of indexs. ---> f(n)
2. Do all possible stufs acc to problem statement.
3. Sum of all stuffs ---> Count all ways //////  Max / Min of all stuffs ----> Find min/ max
4. Base case


f(n) ---> no of ways from 0 to n

BASE CASE:
-> Whenever it is count ways, base case always return either 0  or 1.

CODE:

int climbStairs(int n) {
        
        if(n == 0)
            return 1;
        if(n == -1)
            return 0;
        
        int left = climbStairs(n - 1);
        int right = climbStairs(n - 2);
        
        return left + right;
    }
    
    TC -> 
    SC ->
    
    Recursive Tree:
    
                                f(3)
                               /    \
                           f(2)      f(1)
                          /    \     /   \
                         f(1)  f(0) f(0)  f(-1)
                         
                         
   -----> We can clearly see overlapping subproblems. So memoization comes in action.
   
   CODE:
   int climb(int dp[] , int n)
    {
        if(n == 0)
            return 1;
        if(n == -1)
            return 0;
        
        if(dp[n] != -1)
            return dp[n];
        
        int left = climb(dp , n - 1);
        int right = climb(dp , n - 2);
        
        return dp[n] = left + right;
        
    }
    int climbStairs(int n) {
        
        int dp[n + 1];
        memset(dp , - 1 , sizeof(dp));
        
        return climb(dp , n);
    }
    
    TC --> O(N)
    SC --> O(N) ---> Recursive stack space + O(N) ---> Dp array
    
    
    To decrease space complexity , Tabulation(Bottom - up Approach):
    
    int climbStairs(int n) {
        
        int dp[n + 1];
        memset(dp , - 1 , sizeof(dp));
        
        dp[0] = 1;
        dp[1] = 1;
        
        for(int i = 2; i <= n; i++)
        {
            dp[i] = dp[i - 1] + dp[i - 2];
        }
        
        return dp[n];
    }
    
    TC --> O(N)
    SC --> O(N) -->Dp array
