Problem Link : https://leetcode.com/problems/unique-paths/

Return the number of possible unique paths that the robot can take to reach the bottom-right corner.
Movements allowed --> right , down

IDENTIFICATION OF RECURSIVE PROBLEMS:
->Trying all possible ways
->If it's a recursive problem, it will be of two types:
  1. Count no of ways. ---> this problem
  2. Min/Max Output.

RULE TO WRITE RECURRENCE:-
1. Express in terms of indexs. ---> f(i --> row , j --> col)
     f(i , j) ---> no. of unique ways from (0 , 0) to (i , j)
2. Do all possible stufs acc to problem statement.
3. Sum of all stuffs ---> Count all ways 
4. Base case
    reached destination -> 1
    not reached -> 0
    
    
//Recursive code
 int robot(int i , int j)
    {
        if(i == 0 && j == 0) 
            return 1;
        if(i < 0 || j < 0)
            return 0;
        
        int up = robot(i - 1 , j);
        int down = robot(i , j - 1);
        
        return (up + down);
    }
    
    int uniquePaths(int m, int n) {
        
        return robot(m- 1 , n - 1);
    }
    
    TC --> O(2 ^ m * n)
    SC --> O((m - 1) + (n - 1))
    
    
//Memoized Code
int robot(int i , int j , vector<vector<int>>& dp)
    {
        if(i == 0 && j == 0) 
            return 1;
        if(i < 0 || j < 0)
            return 0;
        
        if(dp[i][j] != -1)
            return dp[i][j];
        
        int up = robot(i - 1 , j , dp);
        int down = robot(i , j - 1 , dp);
        
        return dp[i][j] = up + down;
    }
    
    int uniquePaths(int m, int n) {
        
        vector<vector<int>>dp(m , vector<int>(n , -1));
        return robot(m- 1 , n - 1 , dp);
    }
    
    TC ---> O(m * n)
    SC ---> O(n) + O(m * n)
    
  //Tabulation Code
  int uniquePaths(int m, int n) {
        
        int dp[m][n];
        
        for(int i = 0; i < m; i++)
        {
            for(int j = 0; j < n; j++)
            {
                
                if(i == 0 && j == 0)
                    dp[i][j] = 1;
                else
                {
                    int up = 0;
                    int down = 0;
                    if(i > 0)
                    up = dp[i - 1][j];
                
                    if(j > 0)
                    down = dp[i][j - 1];
                
                    dp[i][j] = up + down;
                }
                
            }
        }
        return dp[m - 1][n - 1];
    }
        
    TC ---> O(N * M)
    SC ---> O(N * M)
